// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/pvz/pvz.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PVZ_RefundList_FullMethodName  = "/pvz.PVZ/RefundList"
	PVZ_HistoryList_FullMethodName = "/pvz.PVZ/HistoryList"
)

// PVZClient is the client API for PVZ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PVZClient interface {
	RefundList(ctx context.Context, in *RefundListRequest, opts ...grpc.CallOption) (*RefundListResponse, error)
	HistoryList(ctx context.Context, in *HistoryListRequest, opts ...grpc.CallOption) (*HistoryListResponse, error)
}

type pVZClient struct {
	cc grpc.ClientConnInterface
}

func NewPVZClient(cc grpc.ClientConnInterface) PVZClient {
	return &pVZClient{cc}
}

func (c *pVZClient) RefundList(ctx context.Context, in *RefundListRequest, opts ...grpc.CallOption) (*RefundListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundListResponse)
	err := c.cc.Invoke(ctx, PVZ_RefundList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZClient) HistoryList(ctx context.Context, in *HistoryListRequest, opts ...grpc.CallOption) (*HistoryListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoryListResponse)
	err := c.cc.Invoke(ctx, PVZ_HistoryList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PVZServer is the server API for PVZ service.
// All implementations must embed UnimplementedPVZServer
// for forward compatibility.
type PVZServer interface {
	RefundList(context.Context, *RefundListRequest) (*RefundListResponse, error)
	HistoryList(context.Context, *HistoryListRequest) (*HistoryListResponse, error)
	mustEmbedUnimplementedPVZServer()
}

// UnimplementedPVZServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPVZServer struct{}

func (UnimplementedPVZServer) RefundList(context.Context, *RefundListRequest) (*RefundListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundList not implemented")
}
func (UnimplementedPVZServer) HistoryList(context.Context, *HistoryListRequest) (*HistoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryList not implemented")
}
func (UnimplementedPVZServer) mustEmbedUnimplementedPVZServer() {}
func (UnimplementedPVZServer) testEmbeddedByValue()             {}

// UnsafePVZServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PVZServer will
// result in compilation errors.
type UnsafePVZServer interface {
	mustEmbedUnimplementedPVZServer()
}

func RegisterPVZServer(s grpc.ServiceRegistrar, srv PVZServer) {
	// If the following call pancis, it indicates UnimplementedPVZServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PVZ_ServiceDesc, srv)
}

func _PVZ_RefundList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServer).RefundList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZ_RefundList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServer).RefundList(ctx, req.(*RefundListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZ_HistoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServer).HistoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZ_HistoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServer).HistoryList(ctx, req.(*HistoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PVZ_ServiceDesc is the grpc.ServiceDesc for PVZ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PVZ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pvz.PVZ",
	HandlerType: (*PVZServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RefundList",
			Handler:    _PVZ_RefundList_Handler,
		},
		{
			MethodName: "HistoryList",
			Handler:    _PVZ_HistoryList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pvz/pvz.proto",
}
